(async function() {
    const compressed = "";
    const blob2 = new Blob([compressed], { type : 'plain/text' });
    let ds = new DecompressionStream("gzip");
    let decompressedStream = blob2.stream().pipeThrough(ds);

    const decoder = new TextDecoder('utf-8');
    const reader = decompressedStream.getReader();

    let result = '';

    const read = () => {
        return reader.read().then(({ done, value }) => {
            if (done) {
            return result;
            }

            result += decoder.decode(value, { stream: true });

            return read();
        });
    };

    read().then(console.log);
})();